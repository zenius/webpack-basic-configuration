To make the configuration steps, let us start step by step. 

1. To install the webpack, run the following command in your command line. 
  npm install --save-dev webpack 
  
2. Then, initialize your npm package, run in command line. 
 - npm init
  This wil initialize the 'package.json' file for you. 
  
  Note: 
  It will ask for the settings while initializing, you can keep all the settings to default by simply pressing 'Enter Key'. 
 
 3. Now, configure your 'package.json' file as follows: 
  #package.json:
   
   i. In your file, find the 'scripts'. 
   ii. Now, add the following to your 'script' object as follows.
   
 	 "build" : "webpack src/js/app.js dist/bundle.js"   	// "build" :  "webpack entryFilePath outputFilePath"
   
   iii. To run the webpack, type the following command in your command line. 
        npm run build 
        
        It will produce the 'bundle.js' file inside the 'dist' folder which you specified in your "build object". 
    
    iv. At this point, you can get rid all of the 'js' file you had previously refernce in your '.html' file as follows. 
        
        <script src ="dist/bundle.js"></script>   
    
    v. For production build, add the following lines in your 'script' object as follows; 
       
      // "build:prod" : "webpack entryFilePath outputFilePath -p"
        
 	    "build:prod" : "webpack src/js/app.js dist/bundle.js -p ",    /* here, the -p implies production */ 

   vi. To run the webpack, type the following command in your command line. 
       npm run build:prod    
       
       Note: 
       It will also minify your bundle.js file 
     
 4. Now, let us make thing interesting. To imitate the production environment and run it in local server,
    you need to install the following npm package: webpack-dev-server
    
 5. To install webpackg-dev-server, run the following command in your command line.   
   
    npm install --save-dev webpack-dev-server
 
6. Now, go back to your 'package.json' file and make  the following change to work with webpack-dev-server. 
   # package.jsonb
   
   // "build" : "webpack-dev-server --entry ./entryFilePath --output-filename ./outputRelativePath"
    	
    "build" :  "webpack-dev-server --entry ./src/js/app.js --output-filename ./dist/bundle.js",  
    
  Note: 
  At this point, you can delete your bundle.js file from your 'dist' folder 
  Don't worry!: it will reside in your memory when you run local host server. 


7. Beside above, you need to configure another file. Let us call it as 'webpack.config.js', 
   # webpack.config.js
   	  var path =  require('path'); 

   	  module.exports = { 
   	  	entry: "./src/js/app.js",   /*this is your entry path*/
   	  	output:  {
   	  		path: path.resolve(__dirname, 'dist'),    /* this is your output path */
   	  		filename: 'bundle.js',                    /* the name of the file where your file get bundled */
   	  		publicPath: '/dist'                       /* specify the relative path, otherwise you will get error */
   	  	}
   	  };  

8. Now, make changes in your 'package.json' file as follows: 
  # package.json
  
   	"build" :  "webpack-dev-server",
   	"build:prod" : "webpack-dev-server -p"    /* here, the -p implies production */


9. Now, let us move to another level, here we will be dealing with the 'module loaders'. 
   This is your 'Transformer'. (Wow!)
   
10. Let us try to bundle all your  'style file'(css file) into your 'js file'. 
    You need the following two loaders to make it work. 
    Run the following command in your command line. 
   
   	npm install --save-dev css-loader style-loader    / * here, --save-dev implies that this is only for the development build*/

11. Let us add some more lines in your 'webpack.config.js' file as follows. 
  # webpackg.config.js
      var path =  require('path'); 

   	  module.exports = { 
          entry: "./src/js/app.js",   /*this is your entry path*/

          output:  {
            path: path.resolve(__dirname, 'dist'),    /* this is your output path */
            filename: 'bundle.js',                    /* the name of the file where your file get bundled */
            publicPath: '/dist'                       /* specify the relative path, otherwise you will get error */
          },

           / * added lines are here */ 
          module: {
              test: /\.css$/,   /* regular expression which ends in .css */
              use: [
                  'style-loader',      /* the module loads the loader in opposite direction */
                  'css-loader'     
              ] 
          }
      
   	  };  
      
     

12.  This is the final step to configure the 'webpack.config.js' file. 
     This is the improvised 'Transformer' which is called as 'plugins'.
     (Hurray! another upgrade.) 
     Let us see what it does. 
    
     Make the following changes in the 'webpack.config.js' file, 
      # webpackg.config.js
      var path =  require('path'); 
     
      /* added lines */
      var webpack  = require('webpack');   /*add it to the top of the file 'webpack.config.js'*/

   	  module.exports = { 
          entry: "./src/js/app.js",   /* this is your entry path */
          
          output:  {
            path: path.resolve(__dirname, 'dist'),    /* this is your output path */
            filename: 'bundle.js',                    /* the name of the file where your file get bundled */
            publicPath: '/dist'                       /* specify the relative path, otherwise you will get error */
          }, 
          
          module: {
            test: /\.css$/,   /* regular expression which ends in .css */
            use: [
                'style-loader',      /* the module loads the loader in opposite direction */
                'css-loader'     
            ] 
        }

          /* added lines are here */ 
          plugins:  [
            new webpack.optimize.UglifyJsPlugin({ 
              //...
            })
          ]
        
   	  };  
      
      That is your complete webpack.config.js file. 
      Hope this help guys. 
   	  
  
